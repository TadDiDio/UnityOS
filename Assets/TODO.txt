ROSLYN:
Check attributes on bad types, i.e. Subcommand only allowed on ICommand objects
Check that positional indexes are different
UnlimitedArgsAttribute is only used on IEnumerable fields
Only one UnlimitedArgsAttribute
Required is only for switch, all positional are always required
Making a switch with the same long or short name
Missing Command attribute on command class
preserve attribute for anything with Command on it

THINGS TO TEST
Command Meta processor
Sending input to commands while a repl acts on top. it should be buffered and run when the repl exits i think.
IsCommandPath variadic attribute
All cases for binding system
Type type parser
file readers
message formatter


NEXT UP:
Multiple command input via ;
Add overrideable info message to beginning of all repl commands.
windowing system for multiple terminals or custom windowed commands
Maintain consistency per environment (editor, build), not across both
multi console state tracking via files
permissions system (hooked via precommand validator)
Choice functionality in shell to help common input choices that are limited to range. Should support modal GUI later too.
Auto completion system with rich typed positional arg hints in CLI

BUGS
- Need to modify auto command search not to cull by namespace in case users dont do this
- Because of assembly, the dev console will not find types outside of scripts folder

FEATURES TO GET TO
Allow users to apply/override global command name and description processing for consistency
Allow command groups for better output in reg command
Allow users to register type parsers in a single spot if they prefer, something like GlobalTypeParserRegistration.
Create auto test harness to allow users to quickly test their commands.
Async command discovery process removes the need for manual registration which would be absolutely attrocious
Pipe unity log to console
unified vs per shell log
reset terminal command which resets console state to default if a user fucks it
Command for runtime ui construction with possible save as editor window functionality for persistence :o

NOTES FOR DOCS
- Commands are stored in registry using their fully qualified name i.e. parent.sub.subsub so that multiple subcommands 
    can have the same root name without conflicts. Make sure to use the fully qualified name if doing a query (users will
    very rarely if ever need to query though)
- Need to fully document binding behaviors
- Command declaration and attributes
- Mention that if you have a hard time formatting command with built in options, consider making a sub command or two for it.
- Weird error case: unexpected token appearing after positionals but before a switch on a command which accepts variadic 
    args may display a required validation error despite having the switch because the unexpected token started the 
    variadic processing. Technically this error is correct but its unclear.
- don't need to add new() for subcommands and its better if you dont because the needed ones will be automatically instantiated.
- Message formatter exists :)

COMMAND IDEAS
bind
list (debugs helpful fields on all types in the scene maybe)